version: 2.1

jobs:
  save-file:
    docker:
      - image: python:3.7-alpine3.11
    parallelism: 2
    steps:
      - run:
          name: This is one JOB.
          command: | 
            echo " ++++ I like Gitlab Better ++++++"
      - checkout
      - run: 
          name: save a file with vars
          command: | 
            cat \<< EOF >> ~/env
            ENVIRONMENT=production
            VERSION=1
            TYPEORM_CONNECTION=postgres
            TYPEORM_MIGRATIONS_DIR=./src/migrations
            TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            TYPEORM_MIGRATIONS=./src/migrations/*.ts
            EOF
    
  eat-popcorn:
    docker: 
      - image: cimg/base:2021.04
    steps:
      - checkout
      - save_cache:
          key: MyKey
          paths:
            - ~/my-cache
      - run:
          name: Getting some packages installed
          command: |
            sudo apt install unzip tar -y
            echo "Who let the dogs out"
  
  hit-target:
    docker: 
      - image: python:3.7-alpine3.11
    parallelism: 2
    steps:
      - checkout
      - restore_cache:
          keys: 
            - MyKey
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints:
            - '3b:b5:2c:64:a7:26:21:18:60:d0:77:35:2a:53:1d:5a'
      - run:
          name: "Aquiring Target"
          command: |
            apk add --update ansible openssh-client tar gzip curl nodejs npm
      - run:
          name: "Missile Launch ... Destroy Destroy"
          no_output_timeout: 20m
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt fleetcmdr.yml
            


workflows:
  test-workflow:
    jobs:
      - save-file
      - eat-popcorn
      - hit-target
# version: 2.1


# commands:
#   print_pipeline_id:
#     steps:
#       - run: echo $CIRCLE_WORKFLOW_ID

# jobs:
#   a_job:
#     docker:
#       - image: circleci/node
#     steps:
#       - print_pipeline_id

#   a_job_that_fails:
#     docker:
#       - circleci/node:13.8.0
#     steps: 
#       - run: exit 1 

#   run:
#     name: running when it fails and it hurts
#     command: |
#       echo " I ran because your other job failed "
#     when: on_fail

# workflows:
#   my_workflow:
#     jobs:
#       - a_job